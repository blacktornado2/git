**** I am the best Git Commands Cheatsheet in the Universe *****

Learn git -> https://learngitbranching.js.org/?NODEMO
Git Practice:
1. https://github.com/eficode-academy/git-katas
2. https://gitexercises.fracz.com/exercise/master

git config
- git config user.name  -> Display username
- git config user.email -> Display user's email
- git config --global user.name "Ankit"  -> set the username to given
- git config --global user.email "blacktornado2108@gmail.com"  -> set the user email to given
- git config --list  -> Displays all the settings of git

- git status -> know status

* Status of untracked files:
1. Untracked

* Status of tracked files:
1. Unmodified
2. Modified
3. Staged

- git init -> Initialise empty git repository, (a hidden .git folder is made, use ls -a to view it)

git add
- git add .  , git add --a    -> move all files to staging area
- git add <file_name>    -> Move a particular file to staging area
- git add <>       -> is a multipurpose command
* It is used to add a file to staging area
* When used on untracked files, it brings them to tracking area also

git commit
- git commit -m "Message"  -> Commit files (a snapshot will be taken)
- git commit -am "Commit message"   -> Commits all tracked files skipping staging area (untracked files will remain as it is)
- git commit --amend     -> We can change(edit) the last commit without making another commit
- git commit --amend -m <newCommitMessage>  -> Change the last commit message
* The above command will not work when the latest commit is pushed in remote repo

git reset
- git reset HEAD <fileName>    -> staging area -> modified
- git reset <commit_id> -> Move the repo to a particular commit
* We can go back some commits using the following commands:
- git reset --soft HEAD~2  -> 2 latest commits go to staging area(as changes), HEAD 2 commits back 
- git reset --mixed HEAD~  -> 1 latest commit go to modified area, HEAD 1 commit back 
- git reset --hard HEAD~5  -> 5 latest commits are removed permanently, HEAD 5 commit back 

git revert 
* Doesn't rewrite history as git reset. It does 2 things:
1. Reverts the changes that the particular commit does 
2. creates a new commit with reverted changes
- git revert <commitId> : Revert the changes introduced by that particular commit and make a new commit 

                            HEAD
                              |
     C1 <- C2 <- C3 <- C4 <- C3'    (git revert C3)
                    (C3' doesn't contain C3 changes)


git checkout
- git checkout -- <fileName>   -> modified -> unmodified (undo changes made)
- git checkout -   -> go to previous branch

git stash
- git stash OR git stash save -> undo changes(modified and staged both), but save those changes locally in stash
- git stash pop -> return changes from stash(and remove from stash) to our working directory(changes will return and change the status of file to modified and not staged, even if at the time of stashing, they were staged)
- git stash apply  -> changes are returned, but unlike pop, changes will remain in stash
- git stash clear -> permanently delete changes from stash, they can't be recovered later
- git stash list  -> Display the stash history in chronological order
- git stash save <changesName>  -> Save changes locally with specified name
- git stash apply <index>  -> Apply the changes of the specified index(first use git stash list)
- git stash drop <index>  -> Delete the specified changes from the stash

git restore
* git restore can change the status of tracked files
- git restore --staged <file_name>  -> staging area -> modified
- git restore --staged .    -> remove all the files from the staging area
- git restore <file_name>  -> modified -> unmodified

- git rm --cached <file_name>   -> to unstage the file and untrack it

git log
- git log  -> Show all commits and their corresponding hashes (press q to exit)
- git log --oneline  - Show commits in one line
- git log -p  -> Show commit with modifications
- git log -p -3   -> Show 3 commits with modifications
- git log --stat  -> Show us concise information about commit and modifications
- git log --all --decorate --oneline --graph   -> Beautify git log
- git reflog  -> See the previous actions and commands executed 

git remote
- git remote add origin <remote_repo_url>    -> Adds the remote repo URL to our local repo (origin is the name of the URL, we are giving)
- git remote add myOrigin <remote_repo_url>   -> Adds the remote repo URL to our local repo, whenever we will write myOrigin, we will mean that url given
- git remote -v   -> gitshow all remote repo URL attached to that local repo
- git remote add upstream <original_repo_url>  -> Add a upstream branch, origin is our project's URL, upstream is URL where the original project exists

git push
- git push <URL> <branch_name>   -> Push the specified branch to specified URL(generally origin)
- git push origin master    -> Push the master branch to the origin specified
- git push origin <branch_name> -f  -> Push forcefully

git branching
- git branch   -> List all branches
- git branch <new_branch_name>  -> Make a new branch with branchName specified(HEAD doesn't move)
- git checkout -b <newBranch>   -> Make a new branch and shift HEAD to that branch
- git branch -d <branchName>      -> Delete the specified branch(make sure HEAD is not on that branch)
- git checkout <branch_name>  -> Go to the branch specified, HEAD will come on that branch
- git branch -m <newBranchName>  -> Change the name of branch we are currently on, to name specified

** HEAD is a pointer, which points to a branch, at any given time (git show HEAD)
** All the new commits that we do, will be added to the branch, that the HEAD is pointing on

- git checkout <commitId>  -> We will go to that particular commit
* HEAD will be in a detached state, not pointing to a branch, but a commit instead
* Generally, HEAD points to a branch, but in this case it will point to a commit
* To re-attach HEAD with a branch, use git checkout <branchName>

                     HEAD                                              
                      |
                    master
                      |  
         C3 <- C4 <- C8
        /  
C1 <- C2 
        \       
         C5 <- C6 <- C7
                     |
                  bug-fix

        (NORMAL STATE)


=======================================================================                     
                      
                    master
                      |  
         C3 <- C4 <- C8
        /  
C1 <- C2                                [ git checkout C5 ]
        \       
         C5 <- C6 <- C7
          |           |
         HEAD       bug-fix

        (DETACHED STATE)

=======================================================================                     
- git checkout HEAD~1  -> Go to the previous commit
- git checkout HEAD~4  -> Go to 4 commits back

git merge
- git merge <branchName> -> merge the branch specified, with the one HEAD is currently on
* There are two types of merge:
1. Fast forwarding merge: HEAD shifts to latest commit, no new commit is created, happens when the branch HEAD is on has no different commit
2. Normal merge: a new commit is created, HEAD shifts to latest commit, and the branch pointer also shifts same as HEAD

* Merge conflicts arise when there is change in same file, same line
* We can do 3 things in case of merge conflicts:
1. Current changes
2. Incoming changes
3. Accept both changes

- rm -rf .git  -> Remove .git file and hence all git repository details

- git clone <URL>  -> clone the whole repository from the URL to the working directory (No git init needed) , ** the repository will contain all the commits and changes **

* If we rename a file, git will show that new file has been added and old has been deleted, but we have just renamed
- git rm <file_name>  -> git will remove the file and stage it
- git mv <file_name> <new_file_name>  -> rename the file and stage it

- git fetch origin           -> Fetch all the changes from origin(remote repo URL, e.g. Github)
- git fetch --all --prune    -> fetch all the changes

- git pull = git fetch + git merge

git diff
- git diff   -> compares staging area with working directory
- git diff --staged (OR) git diff --cached  -> will list the changes between the staging area and our last commit
- git diff HEAD   -> lists all changes in the working directory tree since your last commit
- git diff HEAD <file-name>   -> to view the changes within a specific file
- git diff <branch1> <branch2>   -> lists the changes between the tips of branch1 and branch2
- git diff <commit1hash> <commit2hash>   -> compare the changes between two commits

git rebase
* Used when we want to shift our commit(s) from one branch to other(mainly to main branch)
* When the commits are shifted from one branch to another, new commits are made which are almost identical to old ones
* New commits are made on the branch, on which rebasing is done
* It helps in linear development
- git checkout <newBranch>   -> shift HEAD to newBranch
- git rebase main            -> rebase commit(s) of newBranch to main
- git rebase -i main        -> interactive console where we can select which commits to remove 
* git rebase can be a dangerous command, use it with due diligence

git fork 
* fork the project from the original repository to our own remote repo(identical)
* Very helpful in open-source contribution
* How does it work: fork repo -> make changes -> commit -> set own remote repo (git remote set myOrigin <>) -> push on myOrigin > raise a P.R.  
* One branch can only open one pull request

git cherry-pick
* Creates a new commit with the changes that the cherry-pick commit introduce 
- git cherry-pick <commitId>  -> The changes on the commit specified will come on the branch and a new commit is formed

             master
                |
         C3 <- C4 
        /  
C1 <- C2             
        \       
         C5 <- C6 <- [C3'] (new commit)
                       | 
                    bug-fix
                       |
                      HEAD

command: git cherry-pick <C3>

Git Switch
- git switch <branchName>  -> Move the HEAD to branch specified(similar to git checkout)
- git switch -c <newBranchName>  -> Make a new branch and switch to it

- touch index.html   -> Make a new file named index.html

gitignore
**** Make a new file named .gitignore using touch command and put all the path of waste files in it. After that, git will ignore those files. ****
.gitignore rules -> https://www.atlassian.com/git/tutorials/saving-changes/gitignore

Git Aliasing
- git config --global alias.'new Command' 'original Command' -> Make customised commands

Git Show
- git show <commitId> --stat  -> view changes in a specific commit
- git show <commit> -- <filePath>  -> show changes in a particular file